

#------------------------------------------------------------------------------------------------------------
# –†–∞–±–æ—á–∏–π –∫–æ–¥

# import os
# import time
# import subprocess
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.chrome.options import Options
# from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager
#
#
# class BrainHireFinalWorking:
#     def __init__(self):
#         self.driver = None
#         self.wait = None
#         self.audio_file = r"C:\Users\Sergio\Desktop\–ó–≤—É–∫\record_out.mp3"
#         self.url = "https://bh75.brainhire.tech/interview/personal/5194d9da-31dd-489f-b5fd-d9cd7dc7932b"
#
#     def play_audio(self):
#         if not os.path.exists(self.audio_file):
#             print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.audio_file}")
#             return False
#         try:
#             subprocess.run(f'start "" "{self.audio_file}"', shell=True)
#             print("üîä –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞")
#             return True
#         except Exception as e:
#             print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
#             return False
#
#     def setup_browser(self):
#         print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
#         options = Options()
#         options.add_argument("--use-fake-ui-for-media-stream")
#         options.add_argument("--autoplay-policy=no-user-gesture-required")
#         options.add_argument("--no-sandbox")
#         options.add_argument("--disable-dev-shm-usage")
#         options.add_argument("--disable-gpu")
#         options.add_argument("--window-size=1920,1080")
#         options.add_argument("--disable-blink-features=AutomationControlled")
#         options.add_experimental_option("excludeSwitches", ["enable-automation"])
#         options.add_experimental_option('useAutomationExtension', False)
#
#         prefs = {
#             "profile.default_content_setting_values.media_stream_camera": 1,
#             "profile.default_content_setting_values.media_stream_mic": 1,
#             "profile.default_content_setting_values.notifications": 2,
#         }
#         options.add_experimental_option("prefs", prefs)
#
#         service = Service(ChromeDriverManager().install())
#         self.driver = webdriver.Chrome(service=service, options=options)
#         self.wait = WebDriverWait(self.driver, 30)
#         self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
#         print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
#
#     def click_button_by_text(self, text, description=""):
#         """–ù–ê–î–ï–ñ–ù–´–ô –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º"""
#         try:
#             xpath = f"//button[contains(normalize-space(.), '{text}')]"
#             btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
#
#             print(f"üéØ –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É: '{text}'")
#
#             # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
#             self.driver.execute_script("arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", btn)
#             time.sleep(0.5)
#
#             if not btn.is_displayed() or not btn.is_enabled():
#                 print(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '{text}' –Ω–µ –≤–∏–¥–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
#                 return False
#
#             # –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
#             try:
#                 btn.click()
#                 print(f"‚úÖ {description or f'–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {text}'}")
#                 time.sleep(2)
#                 return True
#             except Exception as e:
#                 print(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
#
#             # –ü—Ä–æ–±—É–µ–º ActionChains
#             try:
#                 from selenium.webdriver.common.action_chains import ActionChains
#                 actions = ActionChains(self.driver)
#                 actions.move_to_element(btn).click().perform()
#                 print(f"‚úÖ ActionChains –∫–ª–∏–∫: '{text}'")
#                 time.sleep(2)
#                 return True
#             except Exception as e:
#                 print(f"‚ö†Ô∏è ActionChains –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
#
#             # –ü—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
#             try:
#                 self.driver.execute_script("arguments[0].click();", btn)
#                 print(f"‚úÖ JavaScript –∫–ª–∏–∫: '{text}'")
#                 time.sleep(2)
#                 return True
#             except Exception as e:
#                 print(f"‚ö†Ô∏è JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
#
#             return False
#
#         except Exception as e:
#             print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '{text}': {e}")
#             return False
#
#     def force_click_next_button(self):
#         """–ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ï –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ' —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞"""
#         print("üéØ –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ï –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò '–î–ê–õ–ï–ï'...")
#
#         # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
#         time.sleep(3)
#
#         # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
#         methods = [
#             self._method_direct_function_call,
#             self._method_react_props,
#             self._method_dom_manipulation,
#             self._method_event_bypass,
#             self._method_prototype_hack
#         ]
#
#         for i, method in enumerate(methods, 1):
#             print(f"üîÑ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ {i}/5...")
#             if method():
#                 print(f"‚úÖ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ {i} –°–†–ê–ë–û–¢–ê–õ!")
#                 return True
#             time.sleep(2)
#
#         return False
#
#     def _method_direct_function_call(self):
#         """–ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ JavaScript"""
#         try:
#             script = """
#             // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
#             const buttons = Array.from(document.querySelectorAll('button'));
#             const nextBtn = buttons.find(btn =>
#                 btn.textContent && btn.textContent.includes('–î–∞–ª–µ–µ')
#             );
#
#             if (nextBtn) {
#                 console.log('üîß –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:', nextBtn);
#
#                 // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#                 // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–Ω–æ–ø–∫–∏
#                 if (nextBtn.onclick) {
#                     nextBtn.onclick(new MouseEvent('click'));
#                 }
#
#                 // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ React
#                 const reactKey = Object.keys(nextBtn).find(key => key.startsWith('__reactProps'));
#                 if (reactKey && nextBtn[reactKey].onClick) {
#                     nextBtn[reactKey].onClick(new MouseEvent('click'));
#                 }
#
#                 // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#                 const clickEvent = new Event('click', { bubbles: true, cancelable: true });
#                 nextBtn.dispatchEvent(clickEvent);
#
#                 // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#                 nextBtn.focus();
#                 nextBtn.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter' }));
#                 nextBtn.dispatchEvent(new KeyboardEvent('keyup', { key: 'Enter' }));
#
#                 return true;
#             }
#             return false;
#             """
#             return self.driver.execute_script(script)
#         except:
#             return False
#
#     def _method_react_props(self):
#         """–ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ React –ø—Ä–æ–ø—Å–∞–º"""
#         try:
#             script = """
#             // –ò—â–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
#             const buttons = document.querySelectorAll('button');
#             for (let btn of buttons) {
#                 if (btn.textContent && btn.textContent.includes('–î–∞–ª–µ–µ')) {
#                     console.log('üîß React –º–µ—Ç–æ–¥ –¥–ª—è:', btn);
#
#                     // –ò—â–µ–º React –ø—Ä–æ–ø—Å—ã
#                     const reactKey = Object.keys(btn).find(key =>
#                         key.startsWith('__reactProps') ||
#                         key.startsWith('__reactEventHandlers')
#                     );
#
#                     if (reactKey) {
#                         const props = btn[reactKey];
#                         // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#                         if (props.onClick) props.onClick({ preventDefault: () => {} });
#                         if (props.onMouseDown) props.onMouseDown({ preventDefault: () => {} });
#                         if (props.onMouseUp) props.onMouseUp({ preventDefault: () => {} });
#                         if (props.onTouchEnd) props.onTouchEnd({ preventDefault: () => {} });
#
#                         // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
#                         btn.click();
#                         return true;
#                     }
#                 }
#             }
#             return false;
#             """
#             return self.driver.execute_script(script)
#         except:
#             return False
#
#     def _method_dom_manipulation(self):
#         """–ú–µ—Ç–æ–¥ 3: –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è DOM –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã"""
#         try:
#             script = """
#             // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º–∏ –∂–µ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
#             const originalBtn = document.querySelector('button.chakra-button.css-1s89inu');
#             if (!originalBtn) return false;
#
#             console.log('üîß DOM –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è –¥–ª—è:', originalBtn);
#
#             // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
#             const clone = originalBtn.cloneNode(true);
#
#             // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
#             originalBtn.outerHTML = originalBtn.outerHTML;
#
#             // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
#             const newBtn = document.querySelector('button.chakra-button.css-1s89inu');
#             if (newBtn) {
#                 // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
#                 newBtn.onclick = function() {
#                     // –≠–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
#                     console.log('‚úÖ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!');
#                     return true;
#                 };
#
#                 // –í—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫
#                 newBtn.click();
#                 return true;
#             }
#             return false;
#             """
#             return self.driver.execute_script(script)
#         except:
#             return False
#
#     def _method_event_bypass(self):
#         """–ú–µ—Ç–æ–¥ 4: –ü–æ–ª–Ω—ã–π –æ–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π"""
#         try:
#             script = """
#             // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
#             const btn = document.querySelector('button.chakra-button.css-1s89inu');
#             if (!btn) return false;
#
#             console.log('üîß –û–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è:', btn);
#
#             // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#             const originalAddEventListener = EventTarget.prototype.addEventListener;
#             EventTarget.prototype.addEventListener = function() {
#                 if (this === btn && (arguments[0] === 'click' || arguments[0] === 'mousedown')) {
#                     console.log('üîß –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:', arguments[0]);
#                     return;
#                 }
#                 return originalAddEventListener.apply(this, arguments);
#             };
#
#             // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
#             btn.click();
#
#             // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
#             EventTarget.prototype.addEventListener = originalAddEventListener;
#
#             return true;
#             """
#             return self.driver.execute_script(script)
#         except:
#             return False
#
#     def _method_prototype_hack(self):
#         """–ú–µ—Ç–æ–¥ 5: –•–∞–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã"""
#         try:
#             script = """
#             // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
#             const btn = document.querySelector('button.chakra-button.css-1s89inu');
#             if (!btn) return false;
#
#             console.log('üîß Prototype —Ö–∞–∫ –¥–ª—è:', btn);
#
#             // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
#             const originalClick = HTMLElement.prototype.click;
#             const originalDispatch = EventTarget.prototype.dispatchEvent;
#
#             // –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã
#             HTMLElement.prototype.click = function() {
#                 console.log('üîß –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω click –¥–ª—è:', this);
#                 // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–∑–æ–≤ –¥–ª—è –Ω–∞—à–µ–π –∫–Ω–æ–ø–∫–∏
#                 if (this === btn) {
#                     // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π click –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
#                     originalClick.call(this);
#                     return;
#                 }
#                 return originalClick.apply(this, arguments);
#             };
#
#             // –í—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫
#             btn.click();
#
#             // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
#             HTMLElement.prototype.click = originalClick;
#             EventTarget.prototype.dispatchEvent = originalDispatch;
#
#             return true;
#             """
#             return self.driver.execute_script(script)
#         except:
#             return False
#
#     def check_checkboxes(self):
#         """–û—Ç–º–µ—á–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã"""
#         try:
#             checkboxes = self.driver.find_elements(By.CSS_SELECTOR, "svg[data-state='unchecked']")
#             print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤: {len(checkboxes)}")
#             for i, svg in enumerate(checkboxes):
#                 try:
#                     parent = svg.find_element(By.XPATH, "./ancestor::*[contains(@class, 'chakra-checkbox')]")
#                     self.driver.execute_script("arguments[0].click();", parent)
#                     print(f"‚úÖ –ß–µ–∫–±–æ–∫—Å {i + 1} –æ—Ç–º–µ—á–µ–Ω")
#                     time.sleep(0.5)
#                 except:
#                     self.driver.execute_script("arguments[0].click();", svg)
#             return True
#         except Exception as e:
#             print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —á–µ–∫–±–æ–∫—Å–æ–≤: {e}")
#             return False
#
#     def run(self):
#         try:
#             self.setup_browser()
#             print("\n" + "=" * 60)
#             print("üé¨ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–•–û–ñ–î–ï–ù–ò–ï - –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ï –ú–ï–¢–û–î–´")
#             print("=" * 60)
#
#             # === 1. –°–æ–≥–ª–∞—Å–∏–µ ===
#             print("üìÑ –®–∞–≥ 1: –°–æ–≥–ª–∞—Å–∏–µ")
#             self.driver.get(self.url)
#             time.sleep(4)
#             self.check_checkboxes()
#             self.click_button_by_text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'")
#
#             # === 2. –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é ===
#             print("‚ñ∂Ô∏è –®–∞–≥ 2: –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
#             self.click_button_by_text("–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", "–ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é'")
#
#             # === 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ ===
#             print("üì∂ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏")
#             self.click_button_by_text("–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏")
#             time.sleep(12)
#             self.click_button_by_text("–û—Ç–ª–∏—á–Ω–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ", "–û—Ç–ª–∏—á–Ω–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ")
#
#             # === 4. –ö–∞–º–µ—Ä–∞ ===
#             print("üìπ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã")
#             self.click_button_by_text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–º–µ—Ä—É", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–º–µ—Ä—É")
#             time.sleep(6)
#
#             # –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞–º–µ—Ä–µ
#             try:
#                 success_msg = self.wait.until(EC.presence_of_element_located((
#                     By.XPATH,
#                     "//div[contains(text(), '–ö–∞–º–µ—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ')]"
#                 )))
#                 print("‚úÖ –ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
#             except:
#                 print("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
#
#             # üî¥ –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ï –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò "–î–ê–õ–ï–ï"
#             print("üéØ –ó–ê–ü–£–°–ö–ê–ï–ú –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–ö–ò '–î–ê–õ–ï–ï'...")
#             success = self.force_click_next_button()
#
#             if success:
#                 print("üéâ –£–°–ü–ï–•! –ü–µ—Ä–µ—à–ª–∏ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É!")
#             else:
#                 print("üí• –í—Å–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
#
#             # === 5. –ú–∏–∫—Ä–æ—Ñ–æ–Ω ===
#             print("üé§ –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
#             self.click_button_by_text("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
#             time.sleep(2)
#
#             # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
#             self.play_audio()
#             time.sleep(7)
#
#             self.click_button_by_text("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
#             time.sleep(3)
#             self.click_button_by_text("–î–∞–ª–µ–µ", "–î–∞–ª–µ–µ –ø–æ—Å–ª–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
#
#             # === 6. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ===
#             print("‚ÑπÔ∏è –®–∞–≥ 6: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
#             self.click_button_by_text("–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ", "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ")
#             self.click_button_by_text("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º")
#
#             # === 7. –í–æ–ø—Ä–æ—Å—ã ===
#             print("‚ùì –®–∞–≥ 7: –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
#             for i in range(1, 13):
#                 print(f"   –í–æ–ø—Ä–æ—Å {i}/12")
#                 if i < 12:
#                     time.sleep(10)
#                     self.click_button_by_text("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É", f"–í–æ–ø—Ä–æ—Å {i} ‚Üí —Å–ª–µ–¥—É—é—â–∏–π")
#                 else:
#                     time.sleep(10)
#                     self.click_button_by_text("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
#
#             print("\nüéâ –ò–ù–¢–ï–†–í–¨–Æ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
#             time.sleep(30)
#
#         except Exception as e:
#             print(f"üí• –û—à–∏–±–∫–∞: {e}")
#             time.sleep(20)
#         finally:
#             self.driver.quit()
#             print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
#
#
# if __name__ == "__main__":
#     print("üéØ BRAINHIRE ‚Äî –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –ù–ê–ñ–ê–¢–ò–Ø")
#     print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –∫–æ–¥–∞")
#     bot = BrainHireFinalWorking()
#     bot.run()


import os
import time
import subprocess
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager


class BrainHireFinalWorking:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.audio_file = r"C:\Users\Sergio\Desktop\–ó–≤—É–∫\record_out.mp3"
        self.url = "https://bh75.brainhire.tech/interview/personal/c85643ab-c4df-4b7f-9cd3-737ef9fe327d"

    def play_audio(self):
        if not os.path.exists(self.audio_file):
            print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.audio_file}")
            return False
        try:
            subprocess.run(f'start "" "{self.audio_file}"', shell=True)
            print("üîä –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            return False

    def setup_browser(self):
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        options = Options()
        options.add_argument("--use-fake-ui-for-media-stream")
        options.add_argument("--autoplay-policy=no-user-gesture-required")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        prefs = {
            "profile.default_content_setting_values.media_stream_camera": 1,
            "profile.default_content_setting_values.media_stream_mic": 1,
            "profile.default_content_setting_values.notifications": 2,
        }
        options.add_experimental_option("prefs", prefs)

        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=options)
        self.wait = WebDriverWait(self.driver, 30)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")

    def click_button_by_text(self, text, description=""):
        """–ù–ê–î–ï–ñ–ù–´–ô –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            xpath = f"//button[contains(normalize-space(.), '{text}')]"
            btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))

            print(f"üéØ –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É: '{text}'")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", btn)
            time.sleep(0.5)

            if not btn.is_displayed() or not btn.is_enabled():
                print(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '{text}' –Ω–µ –≤–∏–¥–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return False

            # –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            try:
                btn.click()
                print(f"‚úÖ {description or f'–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {text}'}")
                time.sleep(2)
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            # –ü—Ä–æ–±—É–µ–º ActionChains
            try:
                from selenium.webdriver.common.action_chains import ActionChains
                actions = ActionChains(self.driver)
                actions.move_to_element(btn).click().perform()
                print(f"‚úÖ ActionChains –∫–ª–∏–∫: '{text}'")
                time.sleep(2)
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è ActionChains –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            # –ü—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
            try:
                self.driver.execute_script("arguments[0].click();", btn)
                print(f"‚úÖ JavaScript –∫–ª–∏–∫: '{text}'")
                time.sleep(2)
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

            return False

        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '{text}': {e}")
            return False

    def force_click_next_button(self):
        """–ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ï –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ' —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞"""
        print("üéØ –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ï –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò '–î–ê–õ–ï–ï'...")

        # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
        time.sleep(3)

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        methods = [
            self._method_direct_function_call,
            self._method_react_props,
            self._method_dom_manipulation,
            self._method_event_bypass,
            self._method_prototype_hack
        ]

        for i, method in enumerate(methods, 1):
            print(f"üîÑ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ {i}/5...")
            if method():
                print(f"‚úÖ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ {i} –°–†–ê–ë–û–¢–ê–õ!")
                return True
            time.sleep(2)

        return False

    def _method_direct_function_call(self):
        """–ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ JavaScript"""
        try:
            script = """
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
            const buttons = Array.from(document.querySelectorAll('button'));
            const nextBtn = buttons.find(btn => 
                btn.textContent && btn.textContent.includes('–î–∞–ª–µ–µ')
            );

            if (nextBtn) {
                console.log('üîß –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:', nextBtn);

                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–Ω–æ–ø–∫–∏
                if (nextBtn.onclick) {
                    nextBtn.onclick(new MouseEvent('click'));
                }

                // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ React
                const reactKey = Object.keys(nextBtn).find(key => key.startsWith('__reactProps'));
                if (reactKey && nextBtn[reactKey].onClick) {
                    nextBtn[reactKey].onClick(new MouseEvent('click'));
                }

                // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                const clickEvent = new Event('click', { bubbles: true, cancelable: true });
                nextBtn.dispatchEvent(clickEvent);

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                nextBtn.focus();
                nextBtn.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter' }));
                nextBtn.dispatchEvent(new KeyboardEvent('keyup', { key: 'Enter' }));

                return true;
            }
            return false;
            """
            return self.driver.execute_script(script)
        except:
            return False

    def _method_react_props(self):
        """–ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ React –ø—Ä–æ–ø—Å–∞–º"""
        try:
            script = """
            // –ò—â–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
            const buttons = document.querySelectorAll('button');
            for (let btn of buttons) {
                if (btn.textContent && btn.textContent.includes('–î–∞–ª–µ–µ')) {
                    console.log('üîß React –º–µ—Ç–æ–¥ –¥–ª—è:', btn);

                    // –ò—â–µ–º React –ø—Ä–æ–ø—Å—ã
                    const reactKey = Object.keys(btn).find(key => 
                        key.startsWith('__reactProps') || 
                        key.startsWith('__reactEventHandlers')
                    );

                    if (reactKey) {
                        const props = btn[reactKey];
                        // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                        if (props.onClick) props.onClick({ preventDefault: () => {} });
                        if (props.onMouseDown) props.onMouseDown({ preventDefault: () => {} });
                        if (props.onMouseUp) props.onMouseUp({ preventDefault: () => {} });
                        if (props.onTouchEnd) props.onTouchEnd({ preventDefault: () => {} });

                        // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
                        btn.click();
                        return true;
                    }
                }
            }
            return false;
            """
            return self.driver.execute_script(script)
        except:
            return False

    def _method_dom_manipulation(self):
        """–ú–µ—Ç–æ–¥ 3: –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è DOM –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã"""
        try:
            script = """
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º–∏ –∂–µ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
            const originalBtn = document.querySelector('button.chakra-button.css-1s89inu');
            if (!originalBtn) return false;

            console.log('üîß DOM –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è –¥–ª—è:', originalBtn);

            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            const clone = originalBtn.cloneNode(true);

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            originalBtn.outerHTML = originalBtn.outerHTML;

            // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
            const newBtn = document.querySelector('button.chakra-button.css-1s89inu');
            if (newBtn) {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                newBtn.onclick = function() {
                    // –≠–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                    console.log('‚úÖ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!');
                    return true;
                };

                // –í—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫
                newBtn.click();
                return true;
            }
            return false;
            """
            return self.driver.execute_script(script)
        except:
            return False

    def _method_event_bypass(self):
        """–ú–µ—Ç–æ–¥ 4: –ü–æ–ª–Ω—ã–π –æ–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π"""
        try:
            script = """
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
            const btn = document.querySelector('button.chakra-button.css-1s89inu');
            if (!btn) return false;

            console.log('üîß –û–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è:', btn);

            // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const originalAddEventListener = EventTarget.prototype.addEventListener;
            EventTarget.prototype.addEventListener = function() {
                if (this === btn && (arguments[0] === 'click' || arguments[0] === 'mousedown')) {
                    console.log('üîß –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:', arguments[0]);
                    return;
                }
                return originalAddEventListener.apply(this, arguments);
            };

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
            btn.click();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            EventTarget.prototype.addEventListener = originalAddEventListener;

            return true;
            """
            return self.driver.execute_script(script)
        except:
            return False

    def _method_prototype_hack(self):
        """–ú–µ—Ç–æ–¥ 5: –•–∞–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã"""
        try:
            script = """
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
            const btn = document.querySelector('button.chakra-button.css-1s89inu');
            if (!btn) return false;

            console.log('üîß Prototype —Ö–∞–∫ –¥–ª—è:', btn);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            const originalClick = HTMLElement.prototype.click;
            const originalDispatch = EventTarget.prototype.dispatchEvent;

            // –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã
            HTMLElement.prototype.click = function() {
                console.log('üîß –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω click –¥–ª—è:', this);
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–∑–æ–≤ –¥–ª—è –Ω–∞—à–µ–π –∫–Ω–æ–ø–∫–∏
                if (this === btn) {
                    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π click –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                    originalClick.call(this);
                    return;
                }
                return originalClick.apply(this, arguments);
            };

            // –í—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫
            btn.click();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            HTMLElement.prototype.click = originalClick;
            EventTarget.prototype.dispatchEvent = originalDispatch;

            return true;
            """
            return self.driver.execute_script(script)
        except:
            return False

    def check_checkboxes(self):
        """–û—Ç–º–µ—á–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã"""
        try:
            checkboxes = self.driver.find_elements(By.CSS_SELECTOR, "svg[data-state='unchecked']")
            print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤: {len(checkboxes)}")
            for i, svg in enumerate(checkboxes):
                try:
                    parent = svg.find_element(By.XPATH, "./ancestor::*[contains(@class, 'chakra-checkbox')]")
                    self.driver.execute_script("arguments[0].click();", parent)
                    print(f"‚úÖ –ß–µ–∫–±–æ–∫—Å {i + 1} –æ—Ç–º–µ—á–µ–Ω")
                    time.sleep(0.5)
                except:
                    self.driver.execute_script("arguments[0].click();", svg)
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —á–µ–∫–±–æ–∫—Å–æ–≤: {e}")
            return False

    def wait_for_questions_screen(self):
        """–Ø–≤–Ω–æ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏...")

        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
            question_indicators = [
                "//button[contains(., '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É')]",
                "//button[contains(., '–ó–∞–≤–µ—Ä—à–∏—Ç—å')]",
                "//div[contains(@class, 'question')]",
                "//h2[contains(., '–≤–æ–ø—Ä–æ—Å')]"
            ]

            for indicator in question_indicators:
                try:
                    element = self.wait.until(EC.presence_of_element_located((By.XPATH, indicator)))
                    if element.is_displayed():
                        print(f"‚úÖ –≠–∫—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: {indicator}")
                        return True
                except:
                    continue

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –∂–¥–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            time.sleep(5)
            return True

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return False

    def handle_questions(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        print("‚ùì –®–∞–≥ 7: –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")

        # –Ø–≤–Ω–æ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        if not self.wait_for_questions_screen():
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è —ç–∫—Ä–∞–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
            return

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
        try:
            # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            question_indicators = [
                "//div[contains(text(), '–≤–æ–ø—Ä–æ—Å')]",
                "//span[contains(text(), '–≤–æ–ø—Ä–æ—Å')]",
                "//*[contains(text(), '1 –∏–∑')]",
                "//*[contains(text(), '–í–æ–ø—Ä–æ—Å')]"
            ]

            for indicator in question_indicators:
                elements = self.driver.find_elements(By.XPATH, indicator)
                for elem in elements:
                    if elem.is_displayed():
                        print(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {elem.text}")
        except:
            print("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for i in range(1, 13):
            print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å {i}/12")

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
            time.sleep(10)

            if i < 12:
                # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ 1-11 –Ω–∞–∂–∏–º–∞–µ–º "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"
                success = self.click_button_by_text("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É", f"–í–æ–ø—Ä–æ—Å {i} ‚Üí —Å–ª–µ–¥—É—é—â–∏–π")
                if not success:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç –≤–æ–ø—Ä–æ—Å–∞ {i}, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            else:
                # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–∏–º–∞–µ–º "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
                success = self.click_button_by_text("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
                if not success:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")

    def run(self):
        try:
            self.setup_browser()
            print("\n" + "=" * 60)
            print("üé¨ –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–•–û–ñ–î–ï–ù–ò–ï - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –í–û–ü–†–û–°–´")
            print("=" * 60)

            # === 1. –°–æ–≥–ª–∞—Å–∏–µ ===
            print("üìÑ –®–∞–≥ 1: –°–æ–≥–ª–∞—Å–∏–µ")
            self.driver.get(self.url)
            time.sleep(4)
            self.check_checkboxes()
            self.click_button_by_text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'")

            # === 2. –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é ===
            print("‚ñ∂Ô∏è –®–∞–≥ 2: –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é")
            self.click_button_by_text("–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", "–ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é'")

            # === 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ ===
            print("üì∂ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏")
            self.click_button_by_text("–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏")
            time.sleep(12)
            self.click_button_by_text("–û—Ç–ª–∏—á–Ω–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ", "–û—Ç–ª–∏—á–Ω–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ")

            # === 4. –ö–∞–º–µ—Ä–∞ ===
            print("üìπ –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã")
            self.click_button_by_text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–º–µ—Ä—É", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–º–µ—Ä—É")
            time.sleep(6)

            # –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞–º–µ—Ä–µ
            try:
                success_msg = self.wait.until(EC.presence_of_element_located((
                    By.XPATH,
                    "//div[contains(text(), '–ö–∞–º–µ—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ')]"
                )))
                print("‚úÖ –ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
            except:
                print("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

            # üî¥ –ò–°–ö–£–°–°–¢–í–ï–ù–ù–û–ï –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò "–î–ê–õ–ï–ï"
            print("üéØ –ó–ê–ü–£–°–ö–ê–ï–ú –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–ö–ò '–î–ê–õ–ï–ï'...")
            success = self.force_click_next_button()

            if success:
                print("üéâ –£–°–ü–ï–•! –ü–µ—Ä–µ—à–ª–∏ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É!")
            else:
                print("üí• –í—Å–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")

            # === 5. –ú–∏–∫—Ä–æ—Ñ–æ–Ω ===
            print("üé§ –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
            self.click_button_by_text("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
            time.sleep(2)

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
            self.play_audio()
            time.sleep(7)

            self.click_button_by_text("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
            time.sleep(3)
            self.click_button_by_text("–î–∞–ª–µ–µ", "–î–∞–ª–µ–µ –ø–æ—Å–ª–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")

            # === 6. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ===
            print("‚ÑπÔ∏è –®–∞–≥ 6: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
            self.click_button_by_text("–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ", "–í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ")
            self.click_button_by_text("–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º")

            # === 7. –í–æ–ø—Ä–æ—Å—ã ===
            self.handle_questions()

            print("\nüéâ –ò–ù–¢–ï–†–í–¨–Æ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
            time.sleep(30)

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
            time.sleep(20)
        finally:
            self.driver.quit()
            print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    print("üéØ BRAINHIRE ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–û–ü–†–û–°–û–í")
    print("‚úÖ –í–æ–ø—Ä–æ—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    bot = BrainHireFinalWorking()
    bot.run()


   
